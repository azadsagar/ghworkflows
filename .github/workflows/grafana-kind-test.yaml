name: Test Plugin in Kind Cluster
on:
  workflow_call:
    inputs:
      plugin_artifact_name:
        type: string
        required: true
        description: Name of the artifact that contains the plugin zip file
      plugin_file_name:
        type: string
        required: true
        description: Name of the plugin zip file inside the artifact

      manifest_artifact_name:
        type: string
        required: true
        description: Name of the artifact that contains the manifest file
      manifest_file_name:
        type: string
        required: true
        description: Name of the manifest file inside the artifact

      grafana_server_domain:
        type: string
        required: true
        description: Root domain to be set as grafana environment variable

      grafana_server_url:
        type: string
        required: true
        description: Server URL to be set as grafana environment variable

      grafana_docker_image:
        type: string
        required: false
        default: sagarbarai/grafana:10.4.4-cw0.1
        description: URI to grafana docker image

permissions:
  id-token: write
  pull-requests: write
  contents: read
  actions: write

jobs:
  test-in-kind:
    name: Test Plugin in Kind Cluster
    runs-on: ubuntu-latest
    steps:
      - name: Setup Kind Cluster
        uses: helm/kind-action@v1

      - name: Download plugin artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.plugin_artifact_name }}
          path: ./plugin-artifact

      - name: Download manifest artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.manifest_artifact_name }}
          path: ./manifest-artifact

      - name: Test Plugin
        env:
          GF_SERVER_DOMAIN: ${{ inputs.grafana_server_domain }}
          GF_SERVER_ROOT_URL: ${{ inputs.grafana_server_url }}
        run: |
          # run docker image
          kubectl run grafana-test --image=${{ inputs.grafana_docker_image }} --env="GF_SERVER_ROOT_URL=${GF_SERVER_ROOT_URL}" --env="GF_SERVER_DOMAIN=${GF_SERVER_DOMAIN}"
          kubectl wait --for=condition=Ready pod/grafana-test --timeout=60s
          
          # copy plugin zip to pod and extract
          kubectl cp ./plugin-artifact/${{ inputs.plugin_file_name }} grafana-test:/tmp/
          kubectl exec grafana-test -c grafana-test -- unzip /tmp/${{ inputs.plugin_file_name }} -d /var/lib/grafana/plugins/
          echo "Creating plugin config directory"
          kubectl exec grafana-test -c grafana-test -- mkdir -p /var/lib/grafana/plugins/plugin-config
          
          # read the manifest file
          jq -c '.apps[]' ./manifest-artifact/${{ inputs.manifest_file_name }} | while read -r item; do
            plugin_name=`echo $item | jq -r '.name'`
            provision_file=`echo $item | jq -r '.provision'`
            echo "Moving plugin config file ${provision_file}"
            kubectl exec grafana-test -c grafana-test -- mv /var/lib/grafana/plugins/${provision_file} /var/lib/grafana/plugins/plugin-config/
          done
          
          # ask config reload to reload grafana binary
          echo "Performing grafana hot reload"
          kubectl exec grafana-test -c grafana-test -- touch /var/lib/grafana/plugins/watcher
          echo "Waiting for grafana to reload..."
          sleep 90
          echo "Validating via logs"
          kubectl logs grafana-test > /tmp/logs.txt
          
          # Validate provisionig file exist in target directories
          jq -c '.apps[]' ./manifest-artifact/${{ inputs.manifest_file_name }} | while read -r item; do
            provision_file=`echo $item | jq -r '.provision'`
            echo "Validating provisioning file exist ${provision_file}"
            kubectl exec grafana-test -c grafana-test -- ls /var/lib/grafana/plugins/plugin-config/${provision_file}
          done
          
          grep -iw level=error /tmp/logs.txt && exit 1 || echo "No issues found"
          
          # if below command returns non-zero exit code, plugin validation failed
          echo "Current pod status..."
          kubectl get pod grafana-test | grep -i running || exit 1
          
          # cleanup kind cluster
          kubectl delete pod grafana-test

